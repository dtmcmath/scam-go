$ go run scam.go
SCAM Version 0.1
Please be gentle

> (define add1
  (lambda (n) (+ n 1)))

()
> (add1 67)       ; 68
68
> (define sub1
  (lambda (n) (- n 1)))
()
> (sub1 5)        ; 5
4
> (zero? 0)       ; true
(zero? 1492)    ; false

#t
> #f
> (define o+
  (lambda (n m)
    (cond
      ((zero? m) n)
      (else (add1 (o+ n (sub1 m)))))))
()
> (o+ 46 12)      ; 58
58
> (define o-
  (lambda (n m)
    (cond
      ((zero? m) n)
      (else (sub1 (o- n (sub1 m)))))))

()
> (o- 14 3)       ; 11
(o- 17 9)       ; 8

11
> 8
> '(2 111 3 79 47 6)
'(8 55 5 555)
'()

; Examples of not-tups
;
'(1 2 8 apple 4 3)      ; not-a-tup because apple is not a number
'(3 (7 4) 13 9)         ; not-a-tup because (7 4) is a list of numbers, not a number

(2 111 3 79 47 6)
> (8 55 5 555)
> ()
> (1 2 8 apple 4 3)
> (3 (7 4) 13 9)
> (define addtup
  (lambda (tup)
    (cond
      ((null? tup) 0)
      (else (o+ (car tup) (addtup (cdr tup)))))))
()
> (addtup '(3 5 2 8))     ; 18
(addtup '(15 6 7 12 3)) ; 43

18
> 43
> (define o*
  (lambda (n m)
    (cond
      ((zero? m) 0)
      (else (o+ n (o* n (sub1 m)))))))

()
> (o* 5 3)                ; 15
(o* 13 4)               ; 52

15
> 52
> (o* 5 3)                ; 15
(o* 13 4)               ; 52

15
> 52
> (define tup+
  (lambda (tup1 tup2)
    (cond
      ((null? tup1) tup2)
      ((null? tup2) tup1)
      (else
        (cons (o+ (car tup1) (car tup2))
              (tup+ (cdr tup1) (cdr tup2)))))))
()
> (tup+ '(3 6 9 11 4) '(8 5 2 0 7))   ; '(11 11 11 11 11)
(tup+ '(3 7) '(4 6 8 1))            ; '(7 13 8 1)

(11 11 11 11 11)
> (7 13 8 1)
> (define o>
  (lambda (n m)
    (cond
      ((zero? n) #f)
      ((zero? m) #t)
      (else
        (o> (sub1 n) (sub1 m))))))
()
> (o> 12 133)     ; #f (false)
(o> 120 11)     ; #t (true)
(o> 6 6)        ; #f

#f
> #t
> #f
> (define o<
  (lambda (n m)
    (cond
      ((zero? m) #f)
      ((zero? n) #t)
      (else
        (o< (sub1 n) (sub1 m))))))

()
> (o< 4 6)        ; #t
(o< 8 3)        ; #f
(o< 6 6)        ; #f

#t
> #f
> #f
> (define o=
  (lambda (n m)
    (cond
      ((o> n m) #f)
      ((o< n m) #f)
      (else #t))))
()
> (o= 5 5)        ; #t
(o= 1 2)        ; #f

#t
> #f
> (define o^
  (lambda (n m)
    (cond 
      ((zero? m) 1)
      (else (o* n (o^ n (sub1 m)))))))

; Examples of o^
;
(o^ 1 1)        ; 1
(o^ 2 3)        ; 8
(o^ 5 3)        ; 125
()
> 1
> 8
> 125
> (define o/
  (lambda (n m)
    (cond
      ((o< n m) 0)
      (else (add1 (o/ (o- n m) m))))))

; Example of o/
;
(o/ 15 4)       ; 3

()
> 3
> (define olength
  (lambda (lat)
    (cond
      ((null? lat) 0)
      (else (add1 (olength (cdr lat)))))))

; Examples of length
;
(olength '(hotdogs with mustard sauerkraut and pickles))     ; 6
(olength '(ham and cheese on rye))                           ; 5

()
> 6
> 5
> (define pick
  (lambda (n lat)
    (cond
      ((zero? (sub1 n)) (car lat))
      (else
        (pick (sub1 n) (cdr lat))))))

; Example of pick
;
(pick 4 '(lasagna spaghetti ravioli macaroni meatball))     ; 'macaroni

()
> macaroni
> (define rempick
  (lambda (n lat)
    (cond
      ((zero? (sub1 n)) (cdr lat))
      (else
        (cons (car lat) (rempick (sub1 n) (cdr lat)))))))

; Example of rempick
;
(rempick 3 '(hotdogs with hot mustard))     ; '(hotdogs with mustard)

()
> (hotdogs with mustard)
> (define no-nums
  (lambda (lat)
    (cond
      ((null? lat) '())
      ((number? (car lat)) (no-nums (cdr lat)))
      (else
        (cons (car lat) (no-nums (cdr lat)))))))

; Example of no-nums
;
(no-nums '(5 pears 6 prunes 9 dates))       ; '(pears prunes dates)

()
> (pears prunes dates)
> (define all-nums
  (lambda (lat)
    (cond
      ((null? lat) '())
      ((number? (car lat)) (cons (car lat) (all-nums (cdr lat))))
      (else
        (all-nums (cdr lat))))))

; Example of all-nums
;
(all-nums '(5 pears 6 prunes 9 dates))       ; '(5 6 9)

()
> (5 6 9)
> (define eqan?
  (lambda (a1 a2)
    (cond
      ((and (number? a1) (number? a2)) (= a1 a2))
      ((or  (number? a1) (number? a2)) #f)
      (else
        (eq? a1 a2)))))

; Examples of eqan?
;
(eqan? 3 3)     ; #t
(eqan? 3 4)     ; #f
(eqan? 'a 'a)   ; #t
(eqan? 'a 'b)   ; #f

()
> #t
> #f
> #t
> #f
> (define occur
  (lambda (a lat)
    (cond
      ((null? lat) 0)
      ((eq? (car lat) a)
       (add1 (occur a (cdr lat))))
      (else
        (occur a (cdr lat))))))

; Example of occur
;
(occur 'x '(a b x x c d x))     ; 3
(occur 'x '())                  ; 0

()
> 3
> 0
> (define one?
  (lambda (n) (= n 1)))

; Example of one?
;
(one? 5)        ; #f
(one? 1)        ; #t

()
> #f
> #t
> (define rempick-one
  (lambda (n lat)
    (cond
      ((one? n) (cdr lat))
      (else
        (cons (car lat) (rempick-one (sub1 n) (cdr lat)))))))

; Example of rempick-one
;
(rempick-one 4 '(hotdogs with hot mustard))     ; '(hotdogs with mustard)
()
> (hotdogs with hot)
> 