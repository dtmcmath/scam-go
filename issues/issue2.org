* An unexpected exception

#+BEGIN_SRC
bash-3.2$ go run scam.go
SCAM Version 0.1
Please be gentle

> (define eqan?
  (lambda (a1 a2)
    (cond
     ((and (number? a1) (number? a2))
      (= a1 a2))
     ((or (number? a1) (number? a2))
      #f)
     (else (eq? a1 a2)))))

; eqlist?, and equal?? functions from Chapter 5 ()
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      (else
       (and (equal? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2)))))))
(define equal?
  (lambda (s1 s2)
    (cond
     ((and (atom? s1) (atom? s2))
      (eqan? s1 s2))
     ((or (atom? s1) (atom? s2))
      #f)
     (else (eqlist? s1 s2)))))
; member function from Chapter 2 (02-do-it-again.ss)
                                        ;
(define member?
  (lambda (a lat)
    (cond
      ((null? lat) #f)
      (else (or (eq? (car lat) a)
                (member? a (cdr lat)))))))

; atom? function from Chapter 1 (01-toys.ss)
(define atom?
 (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

()
> ()
> ()
> ()
> ()
> '(apples peaches pears plums)

; Example of not a set
;
'(apple peaches apple plum)             ; because 'apple appears twice

(apples peaches pears plums)
> (apple peaches apple plum)
> (define set?
  (lambda (lat)
    (cond
      ((null? lat) #t)
      ((member? (car lat) (cdr lat)) #f)
      (else
        (set? (cdr lat))))))

; Examples of set?
;
(set? '(apples peaches pears plums))            ; #t
(set? '(apple peaches apple plum))              ; #f
(set? '(apple 3 pear 4 9 apple 3 4))            ; #f

()
> #t
> #f
> #f
> (define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      ((member? (car lat) (cdr lat)) (makeset (cdr lat)))
      (else
        (cons (car lat) (makeset (cdr lat)))))))

; Example of makeset
;
(makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(pear plum apple lemon peach)

()
> (pear plum apple lemon peach)
> (define multirember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      ((equal? (car lat) a)
       (multirember a (cdr lat)))
      (else
        (cons (car lat) (multirember a (cdr lat)))))))

()
> (define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        (cons (car lat)
              (makeset (multirember (car lat) (cdr lat))))))))

; Test makeset
;
(makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(apple peach pear plum lemon)

(makeset '(apple 3 pear 4 9 apple 3 4))
; ==> '(apple 3 pear 4 9)

()
> (apple peach pear plum lemon)
> (apple 3 pear 4 9 3 4)
> (define multirember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      ((equal? (car lat) a)
       (multirember a (cdr lat)))
      (else
        (cons (car lat) (multirember a (cdr lat)))))))

()
> (define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        (cons (car lat)
              (makeset (multirember (car lat) (cdr lat))))))))

; Test makeset
;
(makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(apple peach pear plum lemon)

(makeset '(apple 3 pear 4 9 apple 3 4))
; ==> '(apple 3 pear 4 9)

()
> (apple peach pear plum lemon)
> (apple 3 pear 4 9)
> bash-3.2$ !go
go run scam.go
SCAM Version 0.1
Please be gentle

> (define eqan?
  (lambda (a1 a2)
    (cond
     ((and (number? a1) (number? a2))
      (= a1 a2))
     ((or (number? a1) (number? a2))
      #f)
     (else (eq? a1 a2)))))

; eqlist?, and equal?? functions from Chapter 5 ()
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      (else
       (and (equal?? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2)))))))
(define equal??
  (lambda (s1 s2)
    (cond
     ((and (atom? s1) (atom? s2))
      (eqan? s1 s2))
     ((or (atom? s1) (atom? s2))
      #f)
     (else (eqlist? s1 s2)))))
; member function from Chapter 2 (02-do-it-again.ss)
                                        ;
(define member?
  (lambda (a lat)
    (cond
      ((null? lat) #f)
      (else (or (eq? (car lat) a)
                (member? a (cdr lat)))))))

; atom? function from Chapter 1 (01-toys.ss)
(define atom?
 (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

; Example of a set
;
'(apples peaches pears plums)

; Example of not a set
;
'(apple peaches apple plum)             ; because 'apple appears twice

; The set? function determines if a given lat is a set
;
(define set?
  (lambda (lat)
    (cond
      ((null? lat) #t)
      ((member? (car lat) (cdr lat)) #f)
      (else
        (set? (cdr lat))))))

; Examples of set?
;
(set? '(apples peaches pears plums))            ; #t
(set? '(apple peaches apple plum))              ; #f
(set? '(apple 3 pear 4 9 apple 3 4))            ; #f

; The makeset funciton takes a lat and produces a set
;
(define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      ((member? (car lat) (cdr lat)) (makeset (cdr lat)))
      (else
        (cons (car lat) (makeset (cdr lat)))))))

; Example of makeset
;
(makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(pear plum apple lemon peach)

()
> ()
> ()
> ()
> ()
> (apples peaches pears plums)
> (apple peaches apple plum)
> ()
> #t
> #f
> #f
> ()
> (pear plum apple lemon peach)
> (define multirember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      ((equal?? (car lat) a)
       (multirember a (cdr lat)))
      (else
        (cons (car lat) (multirember a (cdr lat)))))))

(define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        (cons (car lat)
              (makeset (multirember (car lat) (cdr lat))))))))

()
> ()
> (makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(apple peach pear plum lemon)

(makeset '(apple 3 pear 4 9 apple 3 4))
; ==> '(apple 3 pear 4 9)

(apple peach pear plum lemon)
> (apple 3 pear 4 9)
> (define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      ((member? (car lat) (cdr lat)) (makeset (cdr lat)))
      (else
        (cons (car lat) (makeset (cdr lat)))))))

()
> (makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(apple peach pear plum lemon)

(pear plum apple lemon peach)
> (define multirember
  (lambda (a lat)
    (cond
      ((null? lat) '())
      ((equal?? (car lat) a)
       (multirember a (cdr lat)))
      (else
        (cons (car lat) (multirember a (cdr lat)))))))

(define makeset
  (lambda (lat)
    (cond
      ((null? lat) '())
      (else
        (cons (car lat)
              (makeset (multirember (car lat) (cdr lat))))))))

; Test makeset
;
(makeset '(apple peach pear peach plum apple lemon peach))
; ==> '(apple peach pear plum lemon)

()
> ()
> (apple peach pear plum lemon)
> (define subset?
  (lambda (set1 set2)
    (cond
      ((null? set1) #t)
      ((member? (car set1) set2)
       (subset? (cdr set1) set2))
      (else #f))))

; Examples of subset?
;
(subset? '(5 chicken wings)
         '(5 hamburgers 2 pieces fried chicken and light duckling wings))
; ==> #t

()
> #f
> subset?
fn:(λ ([Sym(set1) Sym(set2)]) (cond ((null? set1) #t) ((member? (car set1) set2) (subset? (cdr set1) set2)) (else #f)))
> (subset? '(5) '(5 hamburgers 2 pieces fried chicken and light duckling wings))
#t
> (subset? '(5) '(5 hamburgers 2 pieces fried chicken and light duckling wings))
#f
> member?
fn:(λ ([Sym(a) Sym(lat)]) (cond ((null? lat) #f) (else (or (eq? (car lat) a) (member? a (cdr lat))))))
> (define member?
  (lambda (a lat)
    (cond
      ((null? lat) #f)
      (else (or (equal?? (car lat) a)
                (member? a (cdr lat)))))))

()
> (subset? '(5) '(5 hamburgers 2 pieces fried chicken and light duckling wings))
#t
> (define subset?
  (lambda (set1 set2)
    (cond
      ((null? set1) #t)
      ((member? (car set1) set2)
       (subset? (cdr set1) set2))
      (else #f))))

; Examples of subset?
;
(subset? '(5 chicken wings)
         '(5 hamburgers 2 pieces fried chicken and light duckling wings))
; ==> #t

()
> #t
> (subset? '(5 chicken wings) '(4 chicken wings))
#f
> (subset? '(4 pounds of horseradish)
         '(four pounds of chicken and 5 ounces of horseradish))

#f
> (define subset?
  (lambda (set1 set2)
    (cond
      ((null? set1) #t)
      (else (and (member? (car set1) set2)
                 (subset? (cdr set1) set2))))))

; Tests of the new subset?
;
(subset? '(5 chicken wings)
         '(5 hamburgers 2 pieces fried chicken and light duckling wings))
; ==> #t

(subset? '(4 pounds of horseradish)
         '(four pounds of chicken and 5 ounces of horseradish))
; ==> #f

()
> #t
> #f
> (define eqset?
  (lambda (set1 set2)
    (and (subset? set1 set2)
         (subset? set2 set1))))

; Examples of eqset?
;
(eqset? '(a b c) '(c b a))          ; #t

()
> #t
> (eqset? '() '())                    ; #t
(eqset? '(a b c) '(a b))            ; #f

#t
> #f
> (define intersect?
  (lambda (set1 set2)
    (cond
      ((null? set1) #f)
      ((member? (car set1) set2) #t)
      (else
        (intersect? (cdr set1) set2)))))

; Examples of intersect?
;
(intersect?
  '(stewed tomatoes and macaroni)
  '(macaroni and cheese))
; ==> #t

()
> #t
> (intersect?
  '(a b c)
  '(d e f))
; ==> #f

#f
> (define intersect?
  (lambda (set1 set2)
    (cond
      ((null? set1) #f)
      (else (or (member? (car set1) set2)
                (intersect? (cdr set1) set2))))))

; Tests of intersect?
;
(intersect?
  '(stewed tomatoes and macaroni)
  '(macaroni and cheese))
; ==> #t

(intersect?
  '(a b c)
  '(d e f))
; ==> #f

()
> #t
> #f
> (define intersect
  (lambda (set1 set2)
    (cond
      ((null? set1) '())
      ((member? (car set1) set2)
       (cons (car set1) (intersect (cdr set1) set2)))
      (else
        (intersect (cdr set1) set2)))))

; Example of intersect
;
(intersect
  '(stewed tomatoes and macaroni)
  '(macaroni and cheese))
; ==> '(and macaroni)

()
> (and macaroni)
> (define union
  (lambda (set1 set2)
    (cond
      ((null? set1) set2)
      ((member? (car set1) set2)
       (union (cdr set1) set2))
      (else (cons (car set1) (union (cdr set1) set2))))))

; Example of union
;
(union
  '(stewed tomatoes and macaroni casserole)
  '(macaroni and cheese))
; ==> '(stewed tomatoes casserole macaroni and cheese)

()
> (stewed tomatoes casserole macaroni and cheese)
> (define xxx
  (lambda (set1 set2)
    (cond
      ((null? set1) '())
      ((member? (car set1) set2)
       (xxx (cdr set1) set2))
      (else
        (cons (car set1) (xxx (cdr set1) set2))))))

; Example of set difference
;
(xxx '(a b c) '(a b d e f))     ; '(c)

()
> (c)
> (define intersectall
  (lambda (l-set)
    (cond
      ((null? (cdr l-set)) (car l-set))
      (else
        (intersect (car l-set) (intersectall (cdr l-set)))))))

; Examples of intersectall
;
(intersectall '((a b c) (c a d e) (e f g h a b)))       ; '(a)
(intersectall
  '((6 pears and)
    (3 peaches and 6 peppers)
    (8 pears and 6 plums)
    (and 6 prunes with some apples)))                   ; '(6 and)

()
> (a)
> (6 and)
> (define a-pair?
  (lambda (x)
    (cond
      ((atom? x) #f)
      ((null? x) #f)
      ((null? (cdr x)) #f)
      ((null? (cdr (cdr x))) #t)
      (else #f))))

; Examples of pairs
;
(a-pair? '(pear pear))          ; #t

()
> #t
> (a-pair? '(3 7))                ; #t
(a-pair? '((2) (pair)))         ; #t
(a-pair? '(full (house)))       ; #t

#t
> #t
> #t
> (a-pair? '())                   ; #f
(a-pair? '(a b c))              ; #f

#f
> #f
> (define first
  (lambda (p)
    (car p)))

(define second
  (lambda (p)
    (car (cdr p))))

(define build
  (lambda (s1 s2)
    (cons s1 (cons s2 '()))))

()
> ()
> ()
> (define third
  (lambda (l)
    (car (cdr (cdr l)))))

()
> '(apples peaches pumpkins pie)
'((apples peaches) (pumpkin pie) (apples peaches))

; Examples of relations
;
'((apples peaches) (pumpkin pie))
'((4 3) (4 2) (7 6) (6 2) (3 4))

(apples peaches pumpkins pie)
> ((apples peaches) (pumpkin pie) (apples peaches))
> ((apples peaches) (pumpkin pie))
> ((4 3) (4 2) (7 6) (6 2) (3 4))
> (define fun?
  (lambda (rel)
    (set? (firsts rel))))

; It uses firsts function from Chapter 3 (03-cons-the-magnificent.ss)
(define firsts
  (lambda (l)
    (cond
      ((null? l) '())
      (else
        (cons (car (car l)) (firsts (cdr l)))))))

()
> ()
> (fun? '((4 3) (4 2) (7 6) (6 2) (3 4)))     ; #f
(fun? '((8 3) (4 2) (7 6) (6 2) (3 4)))     ; #t
(fun? '((d 4) (b 0) (b 9) (e 5) (g 4)))     ; #f

#f
> #t
> #f
> (define revrel
  (lambda (rel)
    (cond
      ((null? rel) '())
      (else (cons (build (second (car rel))
                         (first (car rel)))
                  (revrel (cdr rel)))))))

; Example of revrel
;
(revrel '((8 a) (pumpkin pie) (got sick)))
; ==> '((a 8) (pie pumpkin) (sick got))

()
> ((a 8) (pie pumpkin) (sick got))
> (define revpair
  (lambda (p)
    (build (second p) (first p))))

; Simplified revrel
;
(define revrel
  (lambda (rel)
    (cond
      ((null? rel) '())
      (else (cons (revpair (car rel)) (revrel (cdr rel)))))))

; Test of simplified revrel
; 
(revrel '((8 a) (pumpkin pie) (got sick)))
; ==> '((a 8) (pie pumpkin) (sick got))

()
> ()
> ((a 8) (pie pumpkin) (sick got))
> (define fullfun?
  (lambda (fun)
    (set? (seconds fun))))

; It uses seconds helper function
;
(define seconds
  (lambda (l)
    (cond
      ((null? l) '())
      (else
        (cons (second (car l)) (seconds (cdr l)))))))

; Examples of fullfun?
;
(fullfun? '((8 3) (4 2) (7 6) (6 2) (3 4)))     ; #f
(fullfun? '((8 3) (4 8) (7 6) (6 2) (3 4)))     ; #t
(fullfun? '((grape raisin)
            (plum prune)
            (stewed prune)))                    ; #f

()
> ()
> #f
> #t
> #f
> (define one-to-one?
  (lambda (fun)
    (fun? (revrel fun))))

(one-to-one? '((8 3) (4 2) (7 6) (6 2) (3 4)))     ; #f
(one-to-one? '((8 3) (4 8) (7 6) (6 2) (3 4)))     ; #t
(one-to-one? '((grape raisin)
               (plum prune)
               (stewed prune)))                    ; #f

()
> #f
> #t
> #f
> (one-to-one? '((chocolate chip) (doughy cookie)))
; ==> #t and you deserve one now!

#t
> bash-3.2$ !go
go run scam.go
SCAM Version 0.1
Please be gentle

> (define atom?
 (lambda (x)
    (and (not (pair? x)) (not (null? x)))))

; The rember-f function takes the test function, element, and a list
; and removes the element that test true
;
(define rember-f
  (lambda (test? a l)
    (cond
      ((null? l) '())
      ((test? (car l) a) (cdr l))
      (else
        (cons (car l) (rember-f test? a (cdr l)))))))

()
> ()
> (rember-f = 5 '(6 2 5 3))
; ==> '(6 2 3)
(rember-f eq? 2 '(1 2 3 4 5))
; ==> '(1 3 4 5)

(6 2 3)
> (1 2 3 4 5)
> (rember-f = 2 '(1 2 3 4 5))
(1 3 4 5)
> (rember-f eq? 'jelly '(jelly beans are good))
(beans are good)
> (rember-f equal?? '(lemonade (pop corn) and (cake)))
Exception in lookup: Variable Sym(equal??) is not bound
> ; eqan? function from Chapter 4 ()
(define eqan?
  (lambda (a1 a2)
    (cond
     ((and (number? a1) (number? a2))
      (= a1 a2))
     ((or (number? a1) (number? a2))
      #f)
     (else (eq? a1 a2)))))

; eqlist?, and equal?? functions from Chapter 5 ()
(define eqlist?
  (lambda (l1 l2)
    (cond
      ((and (null? l1) (null? l2)) #t)
      ((or (null? l1) (null? l2)) #f)
      (else
       (and (equal?? (car l1) (car l2))
            (eqlist? (cdr l1) (cdr l2)))))))
(define equal??
  (lambda (s1 s2)
    (cond
     ((and (atom? s1) (atom? s2))
      (eqan? s1 s2))
     ((or (atom? s1) (atom? s2))
      #f)
     (else (eqlist? s1 s2)))))

()
> ()
> ()
> (rember-f equal?? '(lemonade (pop corn) and (cake)))
panic: runtime error: index out of range

goroutine 1 [running]:
github.mheducation.com/dave-mcmath/scam/sexpr.evalLambda.func1(0xc4200a17a0, 0x2, 0x2, 0x11653e0, 0xc4200fc870, 0x0, 0x0)
	/Users/mcdave/go/src/github.mheducation.com/dave-mcmath/scam/sexpr/function.go:493 +0x470
github.mheducation.com/dave-mcmath/scam/sexpr.evaluateWithContext(0x11653e0, 0xc4200aeae0, 0x1176b10, 0xc4200780c0, 0xc420115d78, 0x1, 0x101)
	/Users/mcdave/go/src/github.mheducation.com/dave-mcmath/scam/sexpr/evaluator.go:73 +0x539
github.mheducation.com/dave-mcmath/scam/sexpr.Evaluate(0x11653e0, 0xc4200aeae0, 0xc420115d01, 0x1)
	/Users/mcdave/go/src/github.mheducation.com/dave-mcmath/scam/sexpr/evaluator.go:37 +0x45
github.mheducation.com/dave-mcmath/scam/repl.(*repl).Run(0xc42005a0c0)
	/Users/mcdave/go/src/github.mheducation.com/dave-mcmath/scam/repl/repl.go:44 +0x382
main.main()
	/Users/mcdave/go/src/github.mheducation.com/dave-mcmath/scam/scam.go:64 +0x1d5
exit status 2

#+END_SRC
