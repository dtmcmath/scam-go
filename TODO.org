#+TITLE:  Things SCAM Should Do
#+AUTHOR: David McMath
#+EMAIL:  mcdave@mheducation.com
#+OPTIONS: ^:{} toc:nil
#+SEQ_TODO: TODO INPROGRESS(!) | DONE(!)

This document sketches, somewhat randomly, things that need to get
done to make SCAM a thing of true beauty.

#+TOC: headlines

* Issues

** Lex errors are very cryptic

** "*define*" evaluates to =()=

#+BEGIN_SRC scheme
(null? (define a 1))
#+END_SRC

really ought to be nonsense; *define* isn't actually a term.  It's a
macro, or something


* Desiderata

** λ

If you want to be super-clever, try

#+BEGIN_SRC scheme
(define conz
  (lambda (a b)
    (lambda (c)
      (c a b))))
(define carr
  (lambda (c)
    (c (lambda (a b) a))))
(define cdrr
  (lambda (c)
    (c (lambda (a b) b))))

(define trick (conz 'mind 'blown))
(eq? (carr trick) 'mind)
(eq? (cdrr trick) 'blown)
#+END_SRC

Sadly, I had to look that one up.  I knew there was /some/ clever way
to =cons=/=car=/=cdr= from λ, but the only way I remembered was to use
=eq?=.  Which is really cheating.

This is [[./examples/lambda-the-ultimate-trick.ss][in the examples]].

*** Notation for primitive symbols

It'll be good to have a way to tell whether a symbol can be re-bound
or not.

#+BEGIN_SRC scheme
(define null? (lambda (x) (eq? x 'not_null)))
#+END_SRC

is funny and all but confusing.

** INPROGRESS Separate parse errors from evaluation errors

I need to read more about what an "error" S-expression looks like.
Right now, they just look like pretty generic Go structs.

The evaluator's errors look quite a lot like those from
[[https://cisco.github.io/ChezScheme/][Chez Scheme]] (because I copied them).  Parse errors are still a mess

** Bignums

Don't you wonder what

#+BEGIN_SRC scheme
(+ 3141592653589793238462643383279502884197169399375105820974944592307
   2718281828459045235360287471352662497757247093699959574966967627724)
#+END_SRC

is?

** Implement (more) keywords

- *begin*
- ???

* Roadmap

This section tries to put some of the developments into a sequence.

** Cons-es recycled
